# user nginx;

worker_processes 1;

events {
    worker_connections 1024;
}

http {
    resolver 10.96.0.10 valid=10s;
    lua_shared_dict my_shared_dict 10m;
    # Inicializar variables en el diccionario compartido
    init_by_lua_block {
        local shared_dict = ngx.shared.my_shared_dict
        shared_dict:set("API_HOST", "api")  -- Valor predeterminado para API_HOST
        shared_dict:set("WEB_HOST", "web") -- Valor predeterminado para WEB_HOST
    }

    server {
        listen 80;

        location /api/avatar {
            set_by_lua_block $api_host {
                local api_host = ngx.shared.my_shared_dict:get("API_HOST")
                if not api_host then
                    ngx.log(ngx.ERR, "API_HOST not found in shared dict")
                    return "default_host" -- Opcional: define un valor por defecto
                end
                return api_host
            }
            proxy_pass http://$api_host:5000/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /api/avatar/spec {
            set_by_lua_block $api_host {
                local api_host = ngx.shared.my_shared_dict:get("API_HOST")
                if not api_host then
                    ngx.log(ngx.ERR, "API_HOST not found in shared dict")
                    return "default_host" -- Opcional: define un valor por defecto
                end
                return api_host
            }
            proxy_pass http://$api_host:5000/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /ready {
             set_by_lua_block $api_host {
                local api_host = ngx.shared.my_shared_dict:get("API_HOST")
                if not api_host then
                    ngx.log(ngx.ERR, "API_HOST not found in shared dict")
                    return "default_host" -- Opcional: define un valor por defecto
                end
                return api_host
            }
            proxy_pass http://$api_host:5000/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location / {
             set_by_lua_block $web_host {
                local web_host = ngx.shared.my_shared_dict:get("WEB_HOST")
                if not web_host then
                    ngx.log(ngx.ERR, "WEB_HOST not found in shared dict")
                    return "default_host" -- Opcional: define un valor por defecto
                end
                return web_host
            }
            proxy_pass http://$web_host:5173/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        error_page 404 /404.html;
        location = /404.html {
            internal;
        }
    }
}
